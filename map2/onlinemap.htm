<!DOCTYPE html>
<html>

<head>
  <title>map</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <style type="text/css">
    body,
    html,
    #allmap {
      width: 100%;
      height: 100%;
      overflow: hidden;
      margin: 0;
    }

    #l-map {
      height: 100%;
      width: 78%;
      float: left;
      border-right: 2px solid #bcbcbc;
    }

    ol li,
    ul li {
      list-style: none;
    }

    .infoBoxContent {
      font-size: 12px;
      border-radius: 10px;
    }

    .infoBox img {
      display: none;
    }

    .infoBoxContent .list {
      min-width: 50px;
      border-top: none;
      background: #fff;
      min-height: 50px;
    }

    .infoBoxContent .list:hover {
      color: blue;
    }

    .infoBoxContent .list ul {
      margin: 0;
      padding: 2px;
      display: flex;
      flex-direction: column;
    }

    .infoBoxContent .list ul li {
      padding: 2px;
    }

    .infoBoxContent .list ul .last {
      border: none;
    }
  </style>
  <script type="text/javascript"
    src="//api.map.baidu.com/api?type=webgl&v=1.0&ak=ibLWiaQA3tf6QUsv6AGUO6GSccxMj2gn"></script>
  <script type="text/javascript"
    src="http://api.map.baidu.com/library/DistanceTool/1.2/src/DistanceTool_min.js"></script>
    <!-- <script type="text/javascript" src="http://api.map.baidu.com/api?v=3.0&ak=ibLWiaQA3tf6QUsv6AGUO6GSccxMj2gn"></script> -->
  <link href="//mapopen.bj.bcebos.com/github/BMapGLLib/InfoBox/src/InfoBox.js" rel="stylesheet">
  <script src="//mapopen.bj.bcebos.com/github/BMapGLLib/InfoBox/src/InfoBox.js"></script>
  <script type="text/javascript">
  </script>
</head>

<body>
  <div id="allmap"></div>
</body>

</html>
<script type="text/javascript">
  var map = new BMapGL.Map("allmap");
  map.centerAndZoom(new BMapGL.Point(116.4, 39.9), 16);
  map.enableScrollWheelZoom();
  map.addControl(new BMapGL.NavigationControl());
  map.addControl(new BMapGL.ScaleControl());
  map.enableScrollWheelZoom(true);
  var navi3DCtrl = new BMapGL.NavigationControl3D();
  map.addControl(navi3DCtrl);

  var gps = {};
  gps.longitude = 0;
  gps.latitude = 0;
  gps.resetCenter = false;
  gps.converted = true;
  var baseStationMap = new Map();
  var monitorMap = new Map();
  var mapMenu = null;
  var InfoBox = null;

  map.addEventListener('moveend', function () {
    for (baseStation of baseStationMap.values()) {
      if (baseStation.infoBox) {
        baseStation.infoBox.close();
      }
      if (baseStation.marker &&
        (baseStation.longitude != 0 && baseStation.latitude != 0)) {
        var point = baseStation.marker.getPosition();
        baseStation.customOverlay.setPosition(point);
      }
    }
    updateBaseStationStatus();
  });

  map.addEventListener('zoomend', function () {
    for (baseStation of baseStationMap.values()) {
      if (baseStation.infoBox) {
        baseStation.infoBox.close();
      }
      if (baseStation.marker &&
        (baseStation.longitude != 0 && baseStation.latitude != 0)) {
        var point = baseStation.marker.getPosition();
        baseStation.customOverlay.setPosition(point);
      }
    }
    updateBaseStationStatus();
  });

  map.addEventListener('mousedown', (e) => {
    if (!e.overlay) {
      closeInfoBox();
    }
  })

  // 加载完成
  window.onload = function () {
    window.loadMapCompleted();
  }

  // 复位
  function resetCenter() {
    gps.resetCenter = true;
  }

  // 设置中心位置
  function setCenter(longitude, latitude, converted) {
    if (longitude == 0 || latitude == 0) {
      return;
    }
    if (converted == true) {
      var points = [new BMapGL.Point(longitude, latitude)];
      var convertor = new BMapGL.Convertor();
      convertor.translate(points, 1, 5, function (data) {
        if (data.status == 0) {
          map.setCenter(data.points[0]);
        }
      });
    }
    else {
      map.setCenter(new BMapGL.Point(longitude, latitude));
    }
  }

  // 更新基站
  function updateBaseStationMap(array) {
    var newBaseStationMap = new Map();
    var newBaseStationArray = JSON.parse(array);
    for (var i = 0; i < newBaseStationArray.length; i++) {
      var newBaseStation = newBaseStationArray[i];
      if (baseStationMap.has(newBaseStation.id) == true) {
        var baseStation = baseStationMap.get(newBaseStation.id);
        baseStationMap.delete(newBaseStation.id);
        baseStation.num = newBaseStation.num;
        baseStation.name = newBaseStation.name;
        baseStation.ip = newBaseStation.ip;
        baseStation.mac = newBaseStation.mac;
        newBaseStationMap.set(baseStation.id, baseStation);
      } else {
        newBaseStation.longitude = 0.0;
        newBaseStation.latitude = 0.0;
        newBaseStation.time = new Date();
        newBaseStation.signalMap = new Map();
        newBaseStation.marker = null;
        newBaseStation.menu = null;
        newBaseStationMap.set(newBaseStation.id, newBaseStation);
        addBaseStationToMap(newBaseStation);
      }
    }
    newBaseStationArray = null;
    for (baseStation of baseStationMap.values()) {
      removeBaseStation(baseStation);
    }
    baseStationMap.clear();
    baseStationMap = null;
    baseStationMap = newBaseStationMap;
  }

  // 更新基站信号
  function updateBaseStationSignal(array) {
    var baseStationSignalArray = JSON.parse(array);
    for (var i = 0; i < baseStationSignalArray.length; i++) {
      var baseStationSignal = baseStationSignalArray[i];
      if (baseStationMap.has(baseStationSignal.id) == false)
        continue;
      var baseStation = baseStationMap.get(baseStationSignal.id);
      if (baseStation.name != baseStationSignal.name) {
        var name = baseStationSignal.name;
        if (name == null || name == "") {
          name = baseStationSignal.ip;
        }
        if (baseStation.marker) {
          baseStation.marker.getLabel().setContent(name);
        }
      }
      baseStation.num = baseStationSignal.num;
      baseStation.name = baseStationSignal.name;
      baseStation.ip = baseStationSignal.ip;
      baseStation.mac = baseStationSignal.mac;
      var newSignalMap = new Map();
      var signalArray = baseStationSignal.signalArray
      for (var j = 0; j < signalArray.length; j++) {
        var signal = signalArray[j];
        if (signal.mac == null || signal.mac == "")
          continue;
        newSignalMap.set(signal.mac, signal);
      }
      for (signal of baseStation.signalMap.values()) {
        signal.topology = null;
      }
      baseStation.signalMap.clear();
      baseStation.signalMap = null;
      baseStation.signalMap = newSignalMap;
    }
    baseStationSignalArray = null;
  }

  // 更新基站状态
  function updateBaseStationStatus() {
    var size = map.getSize();
    var x = size.width - 480;
    var y = 30;
    var time = new Date();
    for (baseStation of baseStationMap.values()) {
      if (baseStation.marker) {
        if (baseStation.longitude == 0 || baseStation.latitude == 0) {
          var pt = map.pixelToPoint(new BMapGL.Pixel(x, y));
          baseStation.marker.setPosition(pt);
          baseStation.customOverlay.setPosition(pt);
          x -= 80;
        }
        if (baseStation.time.getTime() + 30000 < time.getTime()) {
          var icon = new BMapGL.Icon("images/base_station_red.png", new BMapGL.Size(35, 35));
          baseStation.marker.setIcon(icon);
        }
        else {
          var icon = new BMapGL.Icon("images/base_station_green.png", new BMapGL.Size(35, 35));
          baseStation.marker.setIcon(icon);
        }
      }
    }
  }

  // 删除基站
  function removeBaseStation(baseStation) {
    baseStationMap.delete(baseStation.id);
    removeBaseStationFromMap(baseStation);
    baseStation = null;
  }

  // 更新GPS
  function UpdateBaseStationPos(id, longitude, latitude) {
    if (longitude == 0 || latitude == 0) {
      return;
    }
    if (baseStationMap.has(id) == false) {
      return;
    }
    var baseStation = baseStationMap.get(id);
    baseStation.longitude = longitude;
    baseStation.latitude = latitude;
    baseStation.time = new Date();
    moveBaseStation(baseStation);
    if (gps.resetCenter) {
      gps.resetCenter = false;
      setCenter(longitude, latitude, gps.converted);
    }
    gps.longitude = longitude;
    gps.latitude = latitude;
    gps.converted = true;
  }

  // 自定义覆盖物
  function ComplexCustomOverlay(point, text) {
    this.point = point;
    this.text = text + "";
  }
  ComplexCustomOverlay.prototype = new BMapGL.Overlay();
  ComplexCustomOverlay.prototype.initialize = function (map) {
    this.map = map;
    this.div = document.createElement("div");
    var div = this.div;
    div.style.position = "absolute";
    div.style.zIndex = BMapGL.Overlay.getZIndex(this.point.lat);
    div.style.color = "white";
    div.style.height = "18px";
    div.style.lineHeight = "18px";
    div.style.whiteSpace = "nowrap";
    div.style.fontSize = "16px"
    div.style.fontWeight = "900"
    var span = this.span = document.createElement("span");
    div.appendChild(span);
    span.appendChild(document.createTextNode(this.text));
    map.getPanes().labelPane.appendChild(div);
    return div;
  }
  ComplexCustomOverlay.prototype.draw = function () {
    var map = this.map;
    var pixel = map.pointToOverlayPixel(this.point);
    this.div.style.left = pixel.x + "px";
    this.div.style.top = pixel.y - 8 + "px";
  }
  ComplexCustomOverlay.prototype.setPosition = function (point) {
    var map = this.map;
    this.point = point;
    var pixel = map.pointToOverlayPixel(this.point);
    this.div.style.left = pixel.x + "px";
    this.div.style.top = pixel.y - 8 + "px";
    this.div.style.transform = "translateX(-50%)";
  }

  // 添加基站到地图
  function addBaseStationToMap(baseStation) {
    if (baseStation == null) {
      return;
    }
    if (baseStation.marker != null) {
      return;
    }
    var icon = new BMapGL.Icon("images/base_station_red.png", new BMapGL.Size(36, 36));
    var marker = new BMapGL.Marker(new BMapGL.Point(0, 0), {
      icon: icon,
      enableDragging: true
    });
    marker.setZIndex(100);
    var name = baseStation.name;
    if (name == null || name == "") {
      name = baseStation.ip;
    }
    var label = new BMapGL.Label(name, {
      offset: new BMapGL.Size(18, 36)
    });
    label.setStyle({
      transform: "translateX(-50%)", color: "black",
      fontSize: "12px", border: "0", backgroundColor: "rgba(255,255,255,1)",
      textShadow: "-2px 0 white,0 2px white,2px 0 white,0 -2px white"
    });
    marker.setLabel(label);
    map.addOverlay(marker);
    var customOverlay = new ComplexCustomOverlay(new BMapGL.Point(0, 0), baseStation.num);
    map.addOverlay(customOverlay);
    baseStation.marker = marker;
    baseStation.customOverlay = customOverlay;
    baseStation.time = new Date("2000-1-1");
    marker.addEventListener('dragging', function (e) {
      baseStation.longitude = e.point.lng;
      baseStation.latitude = e.point.lat;
      baseStation.customOverlay.setPosition(e.point);
    });
    marker.addEventListener('dragend', function (e) {
      gps.longitude = e.point.lng;
      gps.latitude = e.point.lat;
      gps.converted = false;
    });
    marker.addEventListener('mousedown', function (e) {
      setContextMenu(baseStation);
    });
  }

  // 移动基站
  function moveBaseStation(baseStation) {
    var points = [new BMapGL.Point(baseStation.longitude, baseStation.latitude)];
    var convertor = new BMapGL.Convertor();
    convertor.translate(points, 1, 5, (data) => {
      if (data.status == 0) {
        baseStation.marker.setPosition(data.points[0]);
        baseStation.customOverlay.setPosition(data.points[0]);
      }
    });
  }

  // 从地图删除基站
  function removeBaseStationFromMap(baseStation) {
    if (baseStation.marker == null) {
      return;
    }
    if (baseStation.infoBox) {
      baseStation.infoBox.close();
      baseStation.menu = null;
    }
    map.removeOverlay(baseStation.marker);
    baseStation.marker = null;
    map.removeOverlay(baseStation.customOverlay);
    baseStation.customOverlay = null;
    for (signal of baseStation.signalMap.values()) {
      signal.topology = null;
    }
  }

  function closeInfoBox() {
    for (baseStation of baseStationMap.values()) {
        if (baseStation.infoBox) {
          baseStation.infoBox.close();
        }
      }
      for (morker of imageMap.values()) {
        if (morker.infoBox) {
          morker.infoBox.close();
        }
      }
  }

  // 设置基站右键菜单
  function setContextMenu(baseStation) {
    closeInfoBox();
    var showMenu = false;
    let htmlText = [];
    for (monitor of monitorMap.values()) {
      if (monitor.baseStationId == baseStation.id) {
        showMenu = true;
        htmlText.push(`<li><div class='left' onclick="handleOpenVideo(monitor, baseStation)">${monitor.name}</div></li>`)
        // menu.addItem(new BMapGL.MenuItem(monitor.name,
        //   function (id) {
        //     return function () {
        //       window.openVideo(id);
        //     }
        //   }(monitor.id), 100));
      }
    }
    htmlText.push(`<li><div class='left' onclick="handleShowTrackDialog(baseStation)">轨迹</div></li>`);
    showMenu = true;
    if (showMenu) {
      showInfoBox(baseStation, htmlText);
    }
  }

  function handleOpenVideo(monitor, baseStation) {
    window.openVideo(monitor.id);
    baseStation.infoBox && baseStation.infoBox.close();
  }

  function handleShowTrackDialog (baseStation) {
    window.showTrackDialog(baseStation.ip, baseStation.name);
    baseStation.infoBox && baseStation.infoBox.close();
  }

  // 更新监控
  function updateMonitorMap(array) {
    var newMonitorMap = new Map();
    var newMonitorArray = JSON.parse(array);
    for (var i = 0; i < newMonitorArray.length; i++) {
      var newMonitor = newMonitorArray[i];
      if (monitorMap.has(newMonitor.id) == true) {
        var monitor = monitorMap.get(newMonitor.id);
        monitor.id = newMonitor.id;
        monitor.name = newMonitor.name;
        monitor.ip = newMonitor.ip;
        monitor.baseStationId = newMonitor.baseStationId;
        newMonitorMap.set(monitor.id, monitor);
      } else {
        newMonitorMap.set(newMonitor.id, newMonitor);
      }
    }
    newMonitorArray = null;
    for (monitor of monitorMap.values()) {
      monitorMap.delete(monitor.id);
    }
    monitorMap = newMonitorMap;
  }

  // 创建拓扑控件
  function TopologyControl() {
    this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;
    this.defaultOffset = new BMapGL.Size(338, 10)
  }
  TopologyControl.prototype = new BMapGL.Control();
  TopologyControl.prototype.initialize = function (map) {
    var div = document.createElement('div');
    var text = document.createTextNode('显示拓扑');
    div.appendChild(text);
    div.style.cursor = "pointer";
    div.style.padding = "7px 10px";
    div.style.boxShadow = "0 2px 6px 0 rgba(27, 142, 236, 0.5)";
    div.style.borderRadius = "5px";
    div.style.backgroundColor = "white";
    div.style.userSelect = "none";
    div.onclick = function (e) {
      closeInfoBox();
      isShowTopology = !isShowTopology;
      if (isShowTopology) {
        text.nodeValue = '隐藏拓扑';
        showTopology();
      } else {
        text.nodeValue = '显示拓扑';
        clearTopology();
      }
    }
    map.getContainer().appendChild(div);
    return div;
  }
  var topologyControl = new TopologyControl();
  map.addControl(topologyControl);

  // 创建清除轨迹控件
  function TrackControl() {
    this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;
    this.defaultOffset = new BMapGL.Size(248, 10)
  }
  TrackControl.prototype = new BMapGL.Control();
  TrackControl.prototype.initialize = function (map) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode('清除轨迹'));
    div.style.cursor = "pointer";
    div.style.padding = "7px 10px";
    div.style.boxShadow = "0 2px 6px 0 rgba(27, 142, 236, 0.5)";
    div.style.borderRadius = "5px";
    div.style.backgroundColor = "white";
    div.style.userSelect = "none";
    div.onclick = function (e) {
      closeInfoBox();
      if (trackPolyline != null) {
        map.removeOverlay(trackPolyline);
        removeOverlay = null;
      }
    }
    map.getContainer().appendChild(div);
    return div;
  }
  var trckControl = new TrackControl();
  map.addControl(trckControl);

  // 创建添加图片控件
  function ImageControl() {
    this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;
    this.defaultOffset = new BMapGL.Size(158, 10)
  }
  ImageControl.prototype = new BMapGL.Control();
  ImageControl.prototype.initialize = function (map) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode('添加图片'));
    div.style.cursor = "pointer";
    div.style.padding = "7px 10px";
    div.style.boxShadow = "0 2px 6px 0 rgba(27, 142, 236, 0.5)";
    div.style.borderRadius = "5px";
    div.style.backgroundColor = "white";
    div.style.userSelect = "none";
    div.onclick = function (e) {
      closeInfoBox();
      window.addImage();
    }
    map.getContainer().appendChild(div);
    return div;
  }
  var imageControl = new ImageControl();
  map.addControl(imageControl);

  // 创建地图复位控件
  function ResetControl() {
    this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;
    this.defaultOffset = new BMapGL.Size(68, 10)
  }
  ResetControl.prototype = new BMapGL.Control();
  ResetControl.prototype.initialize = function (map) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode('地图复位'));
    div.style.cursor = "pointer";
    div.style.padding = "7px 10px";
    div.style.boxShadow = "0 2px 6px 0 rgba(27, 142, 236, 0.5)";
    div.style.borderRadius = "5px";
    div.style.backgroundColor = "white";
    div.style.userSelect = "none";
    div.onclick = function (e) {
      closeInfoBox();
      setCenter(gps.longitude, gps.latitude, gps.converted);
    }
    map.getContainer().appendChild(div);
    return div;
  }
  var resetControl = new ResetControl();
  map.addControl(resetControl);

  // 创建测量控件
  function DistanceControl() {
    this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;
    this.defaultOffset = new BMapGL.Size(10, 10)
  }
  DistanceControl.prototype = new BMapGL.Control();
  DistanceControl.prototype.initialize = function (map) {
    var div = document.createElement('div');
    div.appendChild(document.createTextNode('测量'));
    div.style.cursor = "pointer";
    div.style.padding = "7px 10px";
    div.style.boxShadow = "0 2px 6px 0 rgba(27, 142, 236, 0.5)";
    div.style.borderRadius = "5px";
    div.style.backgroundColor = "white";
    div.style.userSelect = "none";
    div.onclick = function (e) {
      closeInfoBox();
      openDistanceTool();
    }
    map.getContainer().appendChild(div);
    return div;
  }
  var distanceControl = new DistanceControl();
  map.addControl(distanceControl);

  // 测距
  var distance = new BMapLib.DistanceTool(map);
  function openDistanceTool() {
    distance.open();
  }

  // 添加图片到地图
  var imageMap = new Map();

  function handleDelImgIconFromMap () {
    imageMap.delete(marker);
    map.removeOverlay(marker);
  }

  function addImageToMap(url, width, height) {
    var icon = new BMapGL.Icon(url, new BMapGL.Size(width, height));
    var marker = new BMapGL.Marker(map.getCenter(), {
      icon: icon,
      enableDragging: true
    });
    marker.menu = null;
    marker.addEventListener('a a asedown', function () {
      if (marker.infoBox) {
        marker.infoBox.close();
      }
      var htmlText = [];
      htmlText.push(`<li><div class='left' onclick="handleDelImgIconFromMap(imageMap)">删除图标</div></li>`);
      showInfoBox(marker, htmlText);
    });
    imageMap.set(marker, marker);
    map.addOverlay(marker);
  }

  // 显示轨迹
  var gpsBatch = 0;
  var convPoints = [];
  var trackPolyline = null;
  function showTrack(gpsListJson) {
    var gpsList = JSON.parse(gpsListJson);
    gpsBatch = Math.ceil(gpsList.length / 10);
    var points = [];
    for (var i = 0; i < gpsList.length; i++) {
      var gps = gpsList[i];
      points.push(new BMapGL.Point(gps.longitude, gps.latitude));
      if (points.length == 10 || gpsList.length - 1 == i) {
        var convertor = new BMapGL.Convertor();
        convertor.translate(points, 1, 5, function (data) {
          if (data.status == 0) {
            for (var j = 0; j < data.points.length; j++) {
              convPoints.push(data.points[j]);
            }
          }
          if (--gpsBatch == 0) {
            if (trackPolyline != null) {
              map.removeOverlay(trackPolyline);
              removeOverlay = null;
            }
            trackPolyline = new BMapGL.Polyline(convPoints, {
              enableEditing: false,
              enableClicking: true,
              icons: [],
              strokeWeight: '8',
              strokeOpacity: 0.8,
              strokeColor: "#18a45b"
            });
            map.addOverlay(trackPolyline);
          }
        });
        points = [];
      }
    }
  }

  var isShowTopology = false;
  // var arrow = new BMap.Symbol(BMap_Symbol_SHAPE_BACKWARD_OPEN_ARROW, {
  //    scale: 0.6, strokeColor: '#fff', strokeWeight: '2'});
  // arrow.name = "topology";
  function showTopology() {
    clearTopology();
    for (baseStation1 of baseStationMap.values()) {
      for (signal of baseStation1.signalMap.values()) {
        for (baseStation2 of baseStationMap.values()) {
          if (signal.mac == baseStation2.mac) {
            if (baseStation1.marker == null ||
              baseStation2.marker == null)
              break;
            var point1 = baseStation1.marker.getPosition();
            var point2 = baseStation2.marker.getPosition();
            var pixel1 = map.pointToPixel(point1);
            var pixel2 = map.pointToPixel(point2);
            // var lngDiff = Math.abs(point1.lng - point2.lng) / 2;
            // var latDiff = Math.abs(point1.lat - point2.lat) / 2;
            var xDiff = Math.abs(pixel1.x - pixel2.x) / 2;
            var yDiff = Math.abs(pixel1.y - pixel2.y) / 2;
            // if (point1.lng < point2.lng)
            //   point2.lng = point1.lng + lngDiff;
            // else
            //   point2.lng = point1.lng - lngDiff;
            // if (point1.lat < point2.lat)
            //   point2.lat = point1.lat + latDiff;
            // else
            //   point2.lat = point1.lat - latDiff;
            var points = [point1, point2];
            var color = "#00FF00";
            if (signal.intensity <= 0 && signal.intensity >= -68)
              color = "#00FF00";
            else if (signal.intensity < -68 && signal.intensity >= -78)
              color = "#FFFF00";
            else if (signal.intensity < -78 && signal.intensity >= -88)
              color = "#FF0000";
            else
              color = "#969696";
            if (xDiff > 30 || yDiff > 30) {
              signal.topology = new BMapGL.Polyline(points, {
                enableEditing: false, enableClicking: true,
                // icons: [new BMap.IconSequence(arrow, '20', '30')],
                strokeWeight: '8', strokeOpacity: 1.0, strokeColor: color
              });
            } else {
              signal.topology = new BMapGL.Polyline(points, {
                enableEditing: false, enableClicking: true,
                strokeWeight: '8', strokeOpacity: 1.0, strokeColor: color
              });
            }
            signal.topology.name = "topology";
            map.addOverlay(signal.topology);
          }
        }
      }
    }
  }

  function clearTopology() {
    var allOverlay = map.getOverlays();
    for (var i = 0; i < allOverlay.length; i++) {
      if (allOverlay[i].name != null &&
        allOverlay[i].name == "topology") {
        map.removeOverlay(allOverlay[i]);
        allOverlay[i] = null;
      }
      else if (typeof (allOverlay[i].getIcon) == "function") {
        if (allOverlay[i].getIcon() != null &&
          allOverlay[i].getIcon().name == "topology") {
          map.removeOverlay(allOverlay[i]);
          allOverlay[i] = null;
        }
      }
    }
    for (baseStation1 of baseStationMap.values()) {
      for (signal of baseStation1.signalMap.values()) {
        signal.topology = null;
      }
    }
  }

  function setZIndexTopology() {
    var allOverlay = map.getOverlays();
    for (var i = 0; i < allOverlay.length; i++) {
      for (baseStation of baseStationMap.values()) {
        if (allOverlay[i] == baseStation.marker) {
          allOverlay[i].setZIndex(100);
          break;
        }
        if (allOverlay[i] == baseStation.customOverlay) {
          allOverlay[i].setZIndex(101);
          break;
        }
      }
    }
  }

  function showInfoBox(baseStation, htmlText) {
    //  "<li><div class='left'>节点2</div></li>",
    var html = ["<div class='infoBoxContent'><div class='list'><ul>"];
      html = html.concat(htmlText);
    html.push("</ul></div>", "</div>");
    infoBox = new BMapGLLib.InfoBox(map, html.join(""), {
      boxStyle: {
        background: "#fff",
        minWidth: "50px",
        minHeight: "50px",
        borderRadius: "10px"
      },
      align: INFOBOX_AT_BOTTOM,
      offset: new BMapGL.Size(30, 30)
    });
    baseStation.infoBox =infoBox;
    infoBox.open(baseStation.marker);
    
  }

  function ShowObjProperty(obj) {
    var attributes = '';
    var methods = '';
    for (var p in obj) {
      if (typeof (obj[p]) === "function") {
        methods += 'm:' + p + '\r\n';
      } else {
        attributes += 'a:' + p + " = " + obj[p] + "\r\n";
      }
    }
    window.showInfo(attributes + methods);
  }
  // 测试代码
  // var updateBaseStationSignalJson = '[{"id":10952001,"num":"1","name":"节点1","ip":"192.168.1.1","mac":"01:01:01:01:01:01","signalArray":[{"mac":"01:01:01:01:01:02","intensity":-95},{"mac":"01:01:01:01:01:03","intensity":-95}]},{"id":72,"num":"2","name":"节点2","ip":"192.168.1.2","mac":"01:01:01:01:01:02","signalArray":[{"mac":"01:01:01:01:01:01","intensity":-33},{"mac":"01:01:01:01:01:03","intensity":-33}]},{"id":22,"num":"3","name":"节点3","ip":"192.168.1.3","mac":"01:01:01:01:01:03","signalArray":[{"mac":"01:01:01:01:01:01","intensity":-33},{"mac":"01:01:01:01:01:02","intensity":-33}]}]';
  // var updateBaseStationMapJson = '[{"id":10952001,"num":"1","name":"节点1","ip":"192.168.1.1","mac":"01:01:01:01:01:01"},{"id":72,"num":"2","name":"节点2","ip":"192.168.1.2","mac":"01:01:01:01:01:02"},{"id":22,"num":"3","name":"节点3","ip":"192.168.1.3","mac":"01:01:01:01:01:03"}]'
  // updateBaseStationMap(updateBaseStationMapJson);
  var timer = setInterval(function () {
    // updateBaseStationSignal(updateBaseStationSignalJson);
    // UpdateBaseStationPos(10952001, 116.41000000022, 39.96030079556);
    for (baseStation of baseStationMap.values()) {
      if (baseStation.marker &&
        (baseStation.longitude != 0 && baseStation.latitude != 0)) {
        var point = baseStation.marker.getPosition();
        baseStation.customOverlay.setPosition(point);
      }
    }
    updateBaseStationStatus();
    if (isShowTopology) {
      showTopology();
    }
  }, 1000);
</script>